package main

import (
	"crypto/sha512"
	"encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"runtime"
	//"strconv"
	"strings"
	"sync"
	"time"
)

// Base64 Encoded sha512 sum of given password
func HashPassword(pw string) (string, error) {
	hash := sha512.New()
	_, err := hash.Write([]byte(pw))
	if err != nil {
		return "", err
	}
	return base64.StdEncoding.EncodeToString(hash.Sum(nil)), nil
}

// Generates an increasing unique id
//
// A 128 bit identifier is generated by concatenating a 64 bit timestamp with
// a 64 bit random number
func GenerateUuid() (string, error) {
	buf := make([]byte, 16) // 128 bit buffer
	now := time.Now().UTC().UnixNano()

	binary.BigEndian.PutUint64(buf[:8], uint64(now))
	binary.BigEndian.PutUint64(buf[8:], rand.Uint64())

	id := hex.EncodeToString(buf)
	// pad with zeros
	if len(id) < 32 {
		id = strings.Repeat("0", 32-len(id)) + id
	}

	//base64.URLEncoding.EncodeToString(buf), nil
	// fmt.Sprintf("%x-%x", now, random), nil
	return id, nil
}

// A Hasher server
type Server struct {
	HttpServer   *http.Server
	InstanceId   int // Unique id for this server instance
	HashDelay    time.Duration
	hashMap      map[string]string
	hashMapMutex sync.Mutex
}

func NewServer(port int, hashDelay time.Duration) *Server {
	if port < 0 {
		panic("Port cannot be negative")
	}
	server := &Server{
		HttpServer: new(http.Server),
		InstanceId: 42,
		HashDelay:  hashDelay,
		hashMap:    make(map[string]string)}
	mux := http.NewServeMux()
	mux.HandleFunc("/hash", func(w http.ResponseWriter, req *http.Request) {
		server.PutHash(w, req)
	})
	mux.HandleFunc("/hash/", func(w http.ResponseWriter, req *http.Request) {
		server.GetHash(w, req)
	})
	server.HttpServer.Addr = fmt.Sprintf(":%d", port)
	server.HttpServer.Handler = mux
	return server
}

func (server *Server) Close() error {
	return server.HttpServer.Close()
}

func (server *Server) Listen() error {
	return server.HttpServer.ListenAndServe()
}

func (server *Server) PutHash(w http.ResponseWriter, req *http.Request) {
	defer req.Body.Close()
	if req.Method != "POST" {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	err := req.ParseForm()
	if err != nil {
		log.Printf("Failed to parse form: %v\n", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	passwordForm := req.Form["password"]
	if len(passwordForm) < 1 {
		http.Error(w, "Missing password field", http.StatusBadRequest)
		return
	}

	hashId, err := GenerateUuid()
	if err != nil {
		log.Printf("GenerateUuid error: %v\n", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	hash, err := HashPassword(passwordForm[0])
	if err != nil {
		log.Printf("Hash password error: %v\n", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	passwordForm[0] = ""

	go func() {
		time.Sleep(server.HashDelay)
		server.hashMapMutex.Lock()
		defer server.hashMapMutex.Unlock()
		log.Printf("Inserting id %s", hashId)
		server.hashMap[hashId] = hash
	}()

	io.WriteString(w, hashId)
	//log.Println(req.Form["password"])
}

func (server *Server) GetHash(w http.ResponseWriter, req *http.Request) {
	defer req.Body.Close()
	if len(req.URL.Path) == len("/hash/") {
		server.PutHash(w, req)
		return
	}
	if req.Method != "GET" {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	id := req.URL.Path[len("/hash/"):]
	hash, ok := server.hashMap[id]
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	io.WriteString(w, hash)
}

type Id struct {
	Timestamp  int
	InstanceId int
	Random     int
}

func main() {
	runtime.GOMAXPROCS(8)
	rand.Seed(time.Now().UTC().UnixNano())

	port := 8080
	server := NewServer(port, 5*time.Second)
	go func() {
		time.Sleep(50 * time.Second)
		server.Close()
	}()
	log.Printf("Starting hasher server on port %d\n", port)
	err := server.Listen()
	if err != nil {
		log.Print(err)
	}
}
